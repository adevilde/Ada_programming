with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with arbre; use arbre;
with memoire; use memoire;
with fichier;
with code;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with affichage; use affichage;

procedure test_code is
	
	file_name_in : string := "exemple_huff.txt";
	file_name_out : string := "exemple_fichier.code.out";

	package fichier_1 is new fichier(size => 1);
	length : integer := fichier_1.Taille("exemple_huff.txt");
	
	package fichier_length is new fichier(size => length);
	use fichier_length;

	package code_0 is new code(file_size => length, nbu_byte => 0);
	
	package code_length is new code(file_size => length, nbu_byte => code_0.nb_caractere_unique("exemple_huff.txt"));
	use code_length;
	


	tab_branche : T_tab_branche;
	arbre : T_arbre;
	tab_code : T_tab_code;
	c_code : T_code;
	c_code_l : integer := 0;
	c : integer := 0;
	pi : T_pi;
	bpi : T_bpi;
	ipi : integer := 0;
	ibpi : integer := 0;
	e : integer := 0;
	nb_carac_unique : integer;
	Est_Gauche : boolean := False;
	indent : Unbounded_String := To_Unbounded_String("");
	val : T_code;
	len : integer;

	
begin
	nb_carac_unique := nb_caractere_unique(file_name_in);
	Put(nb_carac_unique);
	New_Line;
	Premiere_branche(file_name_in, tab_branche);
	Put("Premiere_branche ok");
	ArbreH(tab_branche, arbre);
	Put("ArbreH ok");
	--Put(Taille(arbre));
	Put_Line("Taille arbre finie");
	Initialiser_tab_code(tab_code);
	Tableau_code(arbre, tab_code, c_code, c_code_l, pi, bpi, ipi, ibpi);
	for i in 0..255 loop
		Acces_tab_code(tab_code, T_byte(i), val, len);
		if len /= 0 then New_line; c := c+1 ;put(character'val(i)); 
		put(len);
		for j in 1..len loop
			put(integer'val(val(j)));
		end loop;
		end if;
	end loop;
	New_line;
 	--Put(c);
	Put("Tableau_code ok");
	New_Line;
	Traduire (file_name_in, file_name_out, tab_code, pi, bpi);
	New_Line;
	Put("Traduire ok");
	New_line;
	Afficher_arbreH(arbre, indent, Est_Gauche);
	Free(arbre, tab_branche);
end test_code;
