with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with arbre; use arbre;
with memoire; use memoire;
with fichier;
with code;

package body interface_utilisateur is

	package fichier_length is new fichier(size => length);
	use fichier_length;

	procedure Afficher_tableH (tab_code : in T_tab_code; Bavard : in Boolean) is

		codeH : T_bits;
		val : T_byte;
		length : Integer;

	begin

		if Bavard = True then

			for i in 0..255 loop
				Acces_tab_code(tab_code, T_byte(i), val, length);
				if length /= 0 then
					Put("'");
					-- Afficher symbole correspondant au code
					Put(Character'Val(i));
					Put("' --> ");

					codeH := To_bits(val);
					for j in length..8 loop
						Put(Integer'Val(codeH(j)),1);
					end loop;
				New_Line;
				end if;
			end loop;
		end if;

	end Afficher_tableH;




	procedure Afficher_arbreH (Arbre : in out T_arbre;
							indent : in Unbounded_String ;
							Est_Gauche : in Boolean ;
							Bavard : in Boolean) is

		Branche_droite : T_arbre;
		Branche_gauche : T_arbre;
		new_indent : Unbounded_String := indent;
	begin

		if Bavard = True then

			if not Est_Vide(Arbre) then

				if indent /= "" then
					Put(To_String(indent));
					Put("\--");
					if Est_Gauche then
						Put("0--");
					else
						Put("1--");
					end if;
				end if;

				Put("(");
				Put(La_freq(Arbre),1);
				Put(")");

				if Terminal(Arbre) then
					Put(" '");
					Put(Character'Val(Le_byte(Arbre)));
					Put("'");
				end if;

				New_Line;

				if indent = "" then
					Append(new_indent, " ");
				elsif Est_Gauche then
					Append(new_indent, "|     ");
				else
					Append(new_indent, "      ");
				end if;

				if not Terminal(Arbre) then
					Branche_gauche := Branche_g(Arbre);
					Afficher_arbreH(Branche_gauche, new_indent, True, Bavard);

					Branche_droite := Branche_d(Arbre);
					Afficher_arbreH(Branche_droite, new_indent, False, Bavard);
				end if;
			else
				New_Line;
			end if;

		end if;

	end Afficher_arbreH;





	procedure interface_utilisateur (nom_fichier : in String;
								  Compression : in Boolean;
								  Bavard : out Boolean) is

	begin

		Bavard := False;

 	case Argument_Count is

 	when 0 => if Compression then
 			Put("Usage : ./compresser nom_fichier");
 		else
 			Put("Usage : ./decompresser nom_fichier");
 		end if;

 	when 1 => nom_fichier := Argument(1);

 	when 2 => if Argument(1) = "-b" or Argumen(1) = "--bavard" then
				Bavard := True;
 				Afficher_arbreH(Arbre, indent, False, Bavard);
				New_Line;
				Afficher_tableH(tab_code, Bavard);
				New_Line;
				Put("Le nombre de caractère unique dans le fichier est ");
				Put(nb_caractere_unique(nom_fichier),1);					New_Line;
				Put("La taille du fichier initiale était ");
				Put(Length,1);
				New_Line;
				Put("La taille du fichier compressé est ");
				Put(fichier_length.Taille(nom_fichier),1);
 		else
 			-- raise Option_inconnue;
 		end if;
 	when others =>
 			-- raise Trop_arguments;
 	end case;



 exception
 		when Option_inconnue => Put("L'option est inconnue");
 		when Trop_arguments => Put("Il y a trop d'arguments. Il faut en mettre au plus 2.");
		when Name_Error => Put("Ce fichier est inexistant");


	end interface_utilisateur;

end interface_utilisateur;
